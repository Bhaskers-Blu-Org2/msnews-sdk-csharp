// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace MicrosoftNewsAPI.SDK
{
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for MicrosoftNewsAPI.
    /// </summary>
    public static partial class MicrosoftNewsAPIExtensions
    {
            /// <summary>
            /// Get available interests.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apikey'>
            /// Security parameter : apikey
            /// </param>
            /// <param name='ocid'>
            /// Security parameter : ocid
            /// </param>
            /// <param name='market'>
            /// The market.
            /// </param>
            /// <param name='user'>
            /// The user ID of who is making the request, needs to be authenticated.
            /// </param>
            /// <param name='activityId'>
            /// Use this parameter for if you need to relate your request activities with
            /// Microsoft News API performance monitoring
            /// </param>
            /// <param name='top'>
            /// Total number of documents required - (default is 10)
            /// </param>
            /// <param name='select'>
            /// Comma separated fields, for attribute projection purpose
            /// </param>
            /// <param name='ids'>
            /// Get related entities via their ids.
            /// </param>
            /// <param name='skip'>
            /// Number of documents to be skipped from the top.
            /// </param>
            public static object GetNewsTopics(this IMicrosoftNewsAPI operations, string apikey, string ocid, string market = default(string), string user = default(string), string activityId = default(string), int? top = default(int?), string select = default(string), string ids = default(string), int? skip = default(int?))
            {
                return operations.GetNewsTopicsAsync(apikey, ocid, market, user, activityId, top, select, ids, skip).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get available interests.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apikey'>
            /// Security parameter : apikey
            /// </param>
            /// <param name='ocid'>
            /// Security parameter : ocid
            /// </param>
            /// <param name='market'>
            /// The market.
            /// </param>
            /// <param name='user'>
            /// The user ID of who is making the request, needs to be authenticated.
            /// </param>
            /// <param name='activityId'>
            /// Use this parameter for if you need to relate your request activities with
            /// Microsoft News API performance monitoring
            /// </param>
            /// <param name='top'>
            /// Total number of documents required - (default is 10)
            /// </param>
            /// <param name='select'>
            /// Comma separated fields, for attribute projection purpose
            /// </param>
            /// <param name='ids'>
            /// Get related entities via their ids.
            /// </param>
            /// <param name='skip'>
            /// Number of documents to be skipped from the top.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetNewsTopicsAsync(this IMicrosoftNewsAPI operations, string apikey, string ocid, string market = default(string), string user = default(string), string activityId = default(string), int? top = default(int?), string select = default(string), string ids = default(string), int? skip = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetNewsTopicsWithHttpMessagesAsync(apikey, ocid, market, user, activityId, top, select, ids, skip, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// The Feed API is a one stop shop for getting content for any category (ie.
            /// autos, sports), search term (ie. Microsoft), or theme (trending feed,
            /// related feed).
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apikey'>
            /// Security parameter : apikey
            /// </param>
            /// <param name='ocid'>
            /// Security parameter : ocid
            /// </param>
            /// <param name='query'>
            /// Comma separated value for an MSN category, entity, or any freeform search
            /// term for which a feed is desired.
            /// </param>
            /// <param name='nextPageCount'>
            /// Indicates the desired number of documents for the next page - Defaults to
            /// $top value, or 10 if $top is not specified.
            /// </param>
            /// <param name='market'>
            /// The market.
            /// </param>
            /// <param name='user'>
            /// The user ID of who is making the request, needs to be authenticated.
            /// </param>
            /// <param name='filter'>
            /// ODATA-formatted filter that applies to artifacts. This supports filtering
            /// on the following artifact properties:
            /// Provider/Id: can filter out specific providers.
            /// Type: can filter out specific content types.
            /// </param>
            /// <param name='activityId'>
            /// Use this parameter for if you need to relate your request activities with
            /// Microsoft News API performance monitoring
            /// </param>
            /// <param name='top'>
            /// Total number of documents required - (default is 10)
            /// </param>
            /// <param name='select'>
            /// Comma separated fields, for attribute projection purpose
            /// </param>
            /// <param name='ids'>
            /// Get related entities via their ids.
            /// </param>
            /// <param name='skip'>
            /// Number of documents to be skipped from the top.
            /// </param>
            public static object GetNewsFeed(this IMicrosoftNewsAPI operations, string apikey, string ocid, string query = default(string), int? nextPageCount = default(int?), string market = default(string), string user = default(string), string filter = default(string), string activityId = default(string), int? top = default(int?), string select = default(string), string ids = default(string), int? skip = default(int?))
            {
                return operations.GetNewsFeedAsync(apikey, ocid, query, nextPageCount, market, user, filter, activityId, top, select, ids, skip).GetAwaiter().GetResult();
            }

            /// <summary>
            /// The Feed API is a one stop shop for getting content for any category (ie.
            /// autos, sports), search term (ie. Microsoft), or theme (trending feed,
            /// related feed).
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apikey'>
            /// Security parameter : apikey
            /// </param>
            /// <param name='ocid'>
            /// Security parameter : ocid
            /// </param>
            /// <param name='query'>
            /// Comma separated value for an MSN category, entity, or any freeform search
            /// term for which a feed is desired.
            /// </param>
            /// <param name='nextPageCount'>
            /// Indicates the desired number of documents for the next page - Defaults to
            /// $top value, or 10 if $top is not specified.
            /// </param>
            /// <param name='market'>
            /// The market.
            /// </param>
            /// <param name='user'>
            /// The user ID of who is making the request, needs to be authenticated.
            /// </param>
            /// <param name='filter'>
            /// ODATA-formatted filter that applies to artifacts. This supports filtering
            /// on the following artifact properties:
            /// Provider/Id: can filter out specific providers.
            /// Type: can filter out specific content types.
            /// </param>
            /// <param name='activityId'>
            /// Use this parameter for if you need to relate your request activities with
            /// Microsoft News API performance monitoring
            /// </param>
            /// <param name='top'>
            /// Total number of documents required - (default is 10)
            /// </param>
            /// <param name='select'>
            /// Comma separated fields, for attribute projection purpose
            /// </param>
            /// <param name='ids'>
            /// Get related entities via their ids.
            /// </param>
            /// <param name='skip'>
            /// Number of documents to be skipped from the top.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetNewsFeedAsync(this IMicrosoftNewsAPI operations, string apikey, string ocid, string query = default(string), int? nextPageCount = default(int?), string market = default(string), string user = default(string), string filter = default(string), string activityId = default(string), int? top = default(int?), string select = default(string), string ids = default(string), int? skip = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetNewsFeedWithHttpMessagesAsync(apikey, ocid, query, nextPageCount, market, user, filter, activityId, top, select, ids, skip, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Read Market objects. Queryable across markets.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apikey'>
            /// Security parameter : apikey
            /// </param>
            /// <param name='ocid'>
            /// Security parameter : ocid
            /// </param>
            /// <param name='filter'>
            /// OData filter.
            /// </param>
            /// <param name='activityId'>
            /// Use this parameter for if you need to relate your request activities with
            /// Microsoft News API performance monitoring
            /// </param>
            /// <param name='top'>
            /// Total number of documents required - (default is 10)
            /// </param>
            /// <param name='select'>
            /// Comma separated fields, for attribute projection purpose
            /// </param>
            /// <param name='ids'>
            /// Get related entities via their ids.
            /// </param>
            /// <param name='skip'>
            /// Number of documents to be skipped from the top.
            /// </param>
            public static object GetNewsMarkets(this IMicrosoftNewsAPI operations, string apikey, string ocid, string filter = default(string), string activityId = default(string), int? top = default(int?), string select = default(string), string ids = default(string), int? skip = default(int?))
            {
                return operations.GetNewsMarketsAsync(apikey, ocid, filter, activityId, top, select, ids, skip).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Read Market objects. Queryable across markets.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apikey'>
            /// Security parameter : apikey
            /// </param>
            /// <param name='ocid'>
            /// Security parameter : ocid
            /// </param>
            /// <param name='filter'>
            /// OData filter.
            /// </param>
            /// <param name='activityId'>
            /// Use this parameter for if you need to relate your request activities with
            /// Microsoft News API performance monitoring
            /// </param>
            /// <param name='top'>
            /// Total number of documents required - (default is 10)
            /// </param>
            /// <param name='select'>
            /// Comma separated fields, for attribute projection purpose
            /// </param>
            /// <param name='ids'>
            /// Get related entities via their ids.
            /// </param>
            /// <param name='skip'>
            /// Number of documents to be skipped from the top.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetNewsMarketsAsync(this IMicrosoftNewsAPI operations, string apikey, string ocid, string filter = default(string), string activityId = default(string), int? top = default(int?), string select = default(string), string ids = default(string), int? skip = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetNewsMarketsWithHttpMessagesAsync(apikey, ocid, filter, activityId, top, select, ids, skip, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
